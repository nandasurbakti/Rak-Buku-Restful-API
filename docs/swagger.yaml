basePath: /
definitions:
  models.BookRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      image_url:
        type: string
      price:
        type: string
      release_year:
        type: integer
      title:
        type: string
      total_page:
        minimum: 1
        type: integer
    required:
    - category_id
    - price
    - release_year
    - title
    - total_page
    type: object
  models.BookWithCategory:
    properties:
      category_id:
        type: integer
      category_name:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: integer
      image)url:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      price:
        type: integer
      release_year:
        type: integer
      thickness:
        type: integer
      title:
        type: string
      total_page:
        type: integer
    type: object
  models.Category:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  models.CategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.RegisterRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  models.User:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      modified_by:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API RESTful untuk mengelola rak buku dengan kategori dan buku
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Rak Buku API
  version: "1.0"
paths:
  /api/books:
    get:
      description: Get list of all books with category information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BookWithCategory'
            type: array
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book with automatic thickness calculation
      parameters:
      - description: Book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.BookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.BookWithCategory'
      summary: Create new book
      tags:
      - books
  /api/books/:id:
    delete:
      description: Delete book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete book
      tags:
      - books
    get:
      description: Get book details by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BookWithCategory'
      summary: Get book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.BookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BookWithCategory'
      summary: Update book
      tags:
      - books
  /api/categories:
    get:
      description: Get list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
      security:
      - BearerAuth: []
      summary: Create new category
      tags:
      - categories
  /api/categories/:id:
    get:
      description: Get category details by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
      summary: Get category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
      security:
      - BearerAuth: []
      summary: Update category
      tags:
      - categories
  /api/categories/:id/books:
    get:
      description: Get all books in a specific category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BookWithCategory'
            type: array
      summary: Get books by category
      tags:
      - categories
  /api/categories/{id}:
    delete:
      description: Delete category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete category
      tags:
      - categories
  /api/users/login:
    post:
      consumes:
      - application/json
      description: Login with username and password to get JWT token
      parameters:
      - description: Login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - users
  /api/users/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User registration
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Ketik "Bearer" diikuti dengan spasi dan token JWT
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
